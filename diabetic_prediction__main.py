# -*- coding: utf-8 -*-
"""Diabetic Prediction _Exposys dataLabs

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X4sBvG2zZu-jprJfKtHPzLUyX-fHZpat

***Importing Libraries***
"""

#Base Libraries
import pandas as pd
import numpy as np
np.random.seed(42)   ## so that output would be same
import matplotlib.pyplot as plt
import seaborn as sns

#Models
from sklearn.neighbors import KNeighborsClassifier as KNC
from sklearn.naive_bayes import GaussianNB as GNB
from sklearn.ensemble import RandomForestClassifier as RFC

#processing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix

"""***Load Data***"""

from google.colab import files
uploaded = files.upload()

import io
DiabetesDFrame = pd.read_csv(io.BytesIO(uploaded['diabetes.csv']))
#Ref::: https://towardsdatascience.com/3-ways-to-load-csv-files-into-colab-7c14fcbdcb92

"""***EDA***


"""

print("Shape of DataFrame>>",DiabetesDFrame.shape)
DiabetesDFrame.head(10)

DiabetesDFrame.describe()

DiabetesDFrame['Outcome'].value_counts()

DiabetesDFrame.info()

X=DiabetesDFrame.drop(columns='Outcome',axis=1)
Y=DiabetesDFrame['Outcome']

X.describe()

Y.describe()

#CORRELATION MATRIX

DiabetesDFrame.corr()

fig=plt.figure(figsize=(15,10))
plt.matshow(DiabetesDFrame.corr()**2,fignum=fig.number)
plt.xticks(range(DiabetesDFrame.shape[1]),DiabetesDFrame.columns,fontsize=8)
cb=plt.colorbar()
cb.ax.tick_params(labelsize=14)
plt.title("Correlation matrix of squared correlations \n",fontsize=22)

#Analyse Feature Output relation by seaborn plots
Features=['Glucose','Insulin','BMI','DiabetesPedigreeFunction','Age',"Pregnancies","BloodPressure","SkinThickness"]
for feature in Features:
    fig = plt.figure(figsize =(16,6))
    sns.distplot(DiabetesDFrame[feature][DiabetesDFrame["Outcome"]==1])
    plt.xticks()
    plt.title(feature,fontsize = 20)

X=DiabetesDFrame.drop(["Pregnancies","BloodPressure","SkinThickness","Outcome"],axis = 1)
y=DiabetesDFrame.iloc[:,-1]

TrainX,ValX,TrainY,ValY=train_test_split(X,y,test_size=0.2,random_state=2,stratify=Y)


print("X_train size:", TrainX.shape)
print("y_train size: ",TrainY.shape,"\n")
print("X_Val size:", ValX.shape)
print("y_Val size:",ValY.shape)

#Standard Scaling
Sc=StandardScaler()
TrainX=Sc.fit_transform(TrainX)
ValX=Sc.fit_transform(ValX)

#DF to Array

TrainX

ValX

"""***Building Model***"""

#KNN Model

Knn_Classifier=KNC(n_neighbors=21)
Knn_Classifier.fit(TrainX,TrainY)

Knn_Pred=Knn_Classifier.predict(ValX)

Knn_Conf_Mat=confusion_matrix(ValY,Knn_Pred)
print(Knn_Conf_Mat,"\n")


print("Correct:",sum(Knn_Pred == ValY))
print("Incorrect : ",sum(Knn_Pred != ValY))
print("Accuracy:",sum(Knn_Pred ==ValY)/len(Knn_Pred))

#Knn_Classifier.score(ValX,ValY)

#++++++++++++++++++++++++++++++++++++++++++++

#GaussainNB Model

NBClassifier=GNB()
NBClassifier.fit(TrainX,TrainY)

NBClassifier_Pred=NBClassifier.predict(ValX)

NBClassifier_Conf_Mat=confusion_matrix(NBClassifier_Pred,ValY)
print(NBClassifier_Conf_Mat,'\n')
print("Correct:",sum(NBClassifier_Pred == ValY))
print("Incorrect : ",sum(NBClassifier_Pred != ValY))
print("Accuracy:",sum(NBClassifier_Pred ==ValY)/len(NBClassifier_Pred))
#NBClassifier.score(ValX,ValY)

#+++++++++++++++++++++++++++++++++++++++++++++++

#RandomFOrestClassifier

RFC_Model=RFC(max_depth=11,random_state=0)
RFC_Model.fit(TrainX,TrainY)

RFC_Pred=RFC_Model.predict(ValX)

RFC_Conf_Mat=confusion_matrix(RFC_Pred,ValY)
print(RFC_Conf_Mat,'\n')
print("Correct:",sum(RFC_Pred == ValY))
print("Incorrect : ",sum(RFC_Pred != ValY))
print("Accuracy:",sum(RFC_Pred ==ValY)/len(RFC_Pred))

"""**USER TESTING**"""

Glucose=int(input("Enter Glucose Level>>"))
Insulin=int(input("Enter Insulin Level>>"))
BMI=float(input("Enter BMI Level>>"))
DiabetesPedigreeFunction=float(input("Enter DiabetesPedigreeFunction>>"))
Age=int(input("Enter Age>>"))

print("\n")
Model=int(input("ENTER TYPE OF MODEL \n1].KNN\n2].GNB \n3].RFC\n"))
Data=(Glucose,Insulin,BMI,DiabetesPedigreeFunction,Age)
arr=np.asarray(Data)
re_Arr=arr.reshape(1,-1)
Std_data=Sc.transform(re_Arr)

if Model==1:
    R=Knn_Classifier.predict(Std_data)
elif Model==2:
    R=NBClassifier.predict(Std_data)
else:
    R=RFC_Model.predict(Data)
if R==1:
    print("~> Daibetic")
else:
    print("~> Non Diabetic")  
    #183	0	23.3	0.672	32-->	1
    #115	0	35.3	0.134	29-->	0